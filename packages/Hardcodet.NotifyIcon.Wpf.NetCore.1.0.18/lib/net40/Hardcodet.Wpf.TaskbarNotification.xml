<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Hardcodet.Wpf.TaskbarNotification</name>
    </assembly>
    <members>
        <member name="T:Hardcodet.Wpf.TaskbarNotification.Interop.SystemInfo">
            <summary>
            This class is a helper for system information, currently to get the DPI factors
            </summary>
        </member>
        <member name="P:Hardcodet.Wpf.TaskbarNotification.Interop.SystemInfo.DpiFactorX">
            <summary>
            Returns the DPI X Factor
            </summary>
        </member>
        <member name="P:Hardcodet.Wpf.TaskbarNotification.Interop.SystemInfo.DpiFactorY">
            <summary>
            Returns the DPI Y Factor
            </summary>
        </member>
        <member name="T:Hardcodet.Wpf.TaskbarNotification.Interop.TrayInfo">
            <summary>
            Resolves the current tray position.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.Interop.TrayInfo.GetTrayLocation">
            <summary>
            Gets the position of the system tray.
            </summary>
            <returns>Tray coordinates.</returns>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.Interop.TrayInfo.GetDeviceCoordinates(Hardcodet.Wpf.TaskbarNotification.Interop.Point)">
            <summary>
            Recalculates OS coordinates in order to support WPFs coordinate
            system if OS scaling (DPIs) is not 100%.
            </summary>
            <param name="point">Point</param>
            <returns>Point</returns>
        </member>
        <member name="T:Hardcodet.Wpf.TaskbarNotification.RoutedEventHelper">
            <summary>
            Helper class used by routed events of the
            <see cref="T:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon"/> class.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.RoutedEventHelper.RaiseEvent(System.Windows.DependencyObject,System.Windows.RoutedEventArgs)">
            <summary>
            A static helper method to raise a routed event on a target UIElement or ContentElement.
            </summary>
            <param name="target">UIElement or ContentElement on which to raise the event</param>
            <param name="args">RoutedEventArgs to use when raising the event</param>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.RoutedEventHelper.AddHandler(System.Windows.DependencyObject,System.Windows.RoutedEvent,System.Delegate)">
            <summary>
            A static helper method that adds a handler for a routed event 
            to a target UIElement or ContentElement.
            </summary>
            <param name="element">UIElement or ContentElement that listens to the event</param>
            <param name="routedEvent">Event that will be handled</param>
            <param name="handler">Event handler to be added</param>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.RoutedEventHelper.RemoveHandler(System.Windows.DependencyObject,System.Windows.RoutedEvent,System.Delegate)">
            <summary>
            A static helper method that removes a handler for a routed event 
            from a target UIElement or ContentElement.
            </summary>
            <param name="element">UIElement or ContentElement that listens to the event</param>
            <param name="routedEvent">Event that will no longer be handled</param>
            <param name="handler">Event handler to be removed</param>
        </member>
        <member name="T:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon">
            <summary>
            A WPF proxy to for a taskbar icon (NotifyIcon) that sits in the system's
            taskbar notification area ("system tray").
            </summary>
            <summary>
            Contains declarations of WPF dependency properties
            and events.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.iconData">
            <summary>
            Represents the current icon data.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.messageSink">
            <summary>
            Receives messages from the taskbar icon.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.singleClickTimerAction">
            <summary>
            An action that is being invoked if the
            <see cref="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.singleClickTimer"/> fires.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.singleClickTimer">
            <summary>
            A timer that is used to differentiate between single
            and double clicks.
            </summary>
        </member>
        <member name="P:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.DoubleClickWaitTime">
            <summary>
            The time we should wait for a double click.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.balloonCloseTimer">
            <summary>
            A timer that is used to close open balloon tooltips.
            </summary>
        </member>
        <member name="P:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.IsTaskbarIconCreated">
            <summary>
            Indicates whether the taskbar icon has been created or not.
            </summary>
        </member>
        <member name="P:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.SupportsCustomToolTips">
            <summary>
            Indicates whether custom tooltips are supported, which depends
            on the OS. Windows Vista or higher is required in order to
            support this feature.
            </summary>
        </member>
        <member name="P:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.IsPopupOpen">
            <summary>
            Checks whether a non-tooltip popup is currently opened.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.#ctor">
            <summary>
            Initializes the taskbar icon and registers a message listener
            in order to receive events from the taskbar area.
            </summary>
        </member>
        <member name="T:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.GetCustomPopupPosition">
            <summary>
            A delegate to handle customer popup positions.
            </summary>
        </member>
        <member name="P:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.CustomPopupPosition">
            <summary>
            Specify a custom popup position
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.GetPopupTrayPosition">
            <summary>
            Returns the location of the system tray
            </summary>
            <returns>Point</returns>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.ShowCustomBalloon(System.Windows.UIElement,System.Windows.Controls.Primitives.PopupAnimation,System.Nullable{System.Int32})">
            <summary>
            Shows a custom control as a tooltip in the tray location.
            </summary>
            <param name="balloon"></param>
            <param name="animation">An optional animation for the popup.</param>
            <param name="timeout">The time after which the popup is being closed.
            Submit null in order to keep the balloon open indefinitely
            </param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="balloon"/>
            is a null reference.</exception>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.ResetBalloonCloseTimer">
            <summary>
            Resets the closing timeout, which effectively
            keeps a displayed balloon message open until
            it is either closed programmatically through
            <see cref="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.CloseBalloon"/> or due to a new
            message being displayed.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.CloseBalloon">
            <summary>
            Closes the current <see cref="P:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.CustomBalloon"/>, if the
            property is set.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.CloseBalloonCallback(System.Object)">
            <summary>
            Timer-invoke event which closes the currently open balloon and
            resets the <see cref="P:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.CustomBalloon"/> dependency property.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.OnMouseEvent(Hardcodet.Wpf.TaskbarNotification.Interop.MouseEvent)">
            <summary>
            Processes mouse events, which are bubbled
            through the class' routed events, trigger
            certain actions (e.g. show a popup), or
            both.
            </summary>
            <param name="me">Event flag.</param>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.OnToolTipChange(System.Boolean)">
            <summary>
            Displays a custom tooltip, if available. This method is only
            invoked for Windows Vista and above.
            </summary>
            <param name="visible">Whether to show or hide the tooltip.</param>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.CreateCustomToolTip">
            <summary>
            Creates a <see cref="T:System.Windows.Controls.ToolTip"/> control that either
            wraps the currently set <see cref="P:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.TrayToolTip"/>
            control or the <see cref="P:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.ToolTipText"/> string.<br/>
            If <see cref="P:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.TrayToolTip"/> itself is already
            a <see cref="T:System.Windows.Controls.ToolTip"/> instance, it will be used directly.
            </summary>
            <remarks>We use a <see cref="T:System.Windows.Controls.ToolTip"/> rather than
            <see cref="T:System.Windows.Controls.Primitives.Popup"/> because there was no way to prevent a
            popup from causing cyclic open/close commands if it was
            placed under the mouse. ToolTip internally uses a Popup of
            its own, but takes advance of Popup's internal <see cref="P:System.Windows.UIElement.IsHitTestVisible"/>
            property which prevents this issue.</remarks>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.WriteToolTipSettings">
            <summary>
            Sets tooltip settings for the class depending on defined
            dependency properties and OS support.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.CreatePopup">
            <summary>
            Creates a <see cref="T:System.Windows.Controls.ToolTip"/> control that either
            wraps the currently set <see cref="P:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.TrayToolTip"/>
            control or the <see cref="P:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.ToolTipText"/> string.<br/>
            If <see cref="P:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.TrayToolTip"/> itself is already
            a <see cref="T:System.Windows.Controls.ToolTip"/> instance, it will be used directly.
            </summary>
            <remarks>We use a <see cref="T:System.Windows.Controls.ToolTip"/> rather than
            <see cref="T:System.Windows.Controls.Primitives.Popup"/> because there was no way to prevent a
            popup from causing cyclic open/close commands if it was
            placed under the mouse. ToolTip internally uses a Popup of
            its own, but takes advance of Popup's internal <see cref="P:System.Windows.UIElement.IsHitTestVisible"/>
            property which prevents this issue.</remarks>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.ShowTrayPopup(Hardcodet.Wpf.TaskbarNotification.Interop.Point)">
            <summary>
            Displays the <see cref="P:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.TrayPopup"/> control if it was set.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.ShowContextMenu(Hardcodet.Wpf.TaskbarNotification.Interop.Point)">
            <summary>
            Displays the <see cref="T:System.Windows.Controls.ContextMenu"/> if it was set.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.OnBalloonToolTipChanged(System.Boolean)">
            <summary>
            Bubbles events if a balloon ToolTip was displayed
            or removed.
            </summary>
            <param name="visible">Whether the ToolTip was just displayed
            or removed.</param>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.ShowBalloonTip(System.String,System.String,Hardcodet.Wpf.TaskbarNotification.BalloonIcon)">
            <summary>
            Displays a balloon tip with the specified title,
            text, and icon in the taskbar for the specified time period.
            </summary>
            <param name="title">The title to display on the balloon tip.</param>
            <param name="message">The text to display on the balloon tip.</param>
            <param name="symbol">A symbol that indicates the severity.</param>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.ShowBalloonTip(System.String,System.String,System.Drawing.Icon,System.Boolean)">
            <summary>
            Displays a balloon tip with the specified title,
            text, and a custom icon in the taskbar for the specified time period.
            </summary>
            <param name="title">The title to display on the balloon tip.</param>
            <param name="message">The text to display on the balloon tip.</param>
            <param name="customIcon">A custom icon.</param>
            <param name="largeIcon">True to allow large icons (Windows Vista and later).</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="customIcon"/>
            is a null reference.</exception>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.ShowBalloonTip(System.String,System.String,Hardcodet.Wpf.TaskbarNotification.Interop.BalloonFlags,System.IntPtr)">
            <summary>
            Invokes <see cref="M:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.Shell_NotifyIcon(Hardcodet.Wpf.TaskbarNotification.Interop.NotifyCommand,Hardcodet.Wpf.TaskbarNotification.Interop.NotifyIconData@)"/> in order to display
            a given balloon ToolTip.
            </summary>
            <param name="title">The title to display on the balloon tip.</param>
            <param name="message">The text to display on the balloon tip.</param>
            <param name="flags">Indicates what icon to use.</param>
            <param name="balloonIconHandle">A handle to a custom icon, if any, or
            <see cref="F:System.IntPtr.Zero"/>.</param>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.HideBalloonTip">
            <summary>
            Hides a balloon ToolTip, if any is displayed.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.DoSingleClickAction(System.Object)">
            <summary>
            Performs a delayed action if the user requested an action
            based on a single click of the left mouse.<br/>
            This method is invoked by the <see cref="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.singleClickTimer"/>.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.SetVersion">
            <summary>
            Sets the version flag for the <see cref="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.iconData"/>.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.OnTaskbarCreated">
            <summary>
            Recreates the taskbar icon if the whole taskbar was
            recreated (e.g. because Explorer was shut down).
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.CreateTaskbarIcon">
            <summary>
            Creates the taskbar icon. This message is invoked during initialization,
            if the taskbar is restarted, and whenever the icon is displayed.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.RemoveTaskbarIcon">
            <summary>
            Closes the taskbar icon if required.
            </summary>
        </member>
        <member name="P:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.IsDisposed">
            <summary>
            Set to true as soon as <c>Dispose</c> has been invoked.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.EnsureNotDisposed">
            <summary>
            Checks if the object has been disposed and
            raises a <see cref="T:System.ObjectDisposedException"/> in case
            the <see cref="P:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.IsDisposed"/> flag is true.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.OnExit(System.Object,System.EventArgs)">
            <summary>
            Disposes the class if the application exits.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.Finalize">
            <summary>
            This destructor will run only if the <see cref="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.Dispose"/>
            method does not get called. This gives this base class the
            opportunity to finalize.
            <para>
            Important: Do not provide destructor in types derived from this class.
            </para>
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.Dispose">
            <summary>
            Disposes the object.
            </summary>
            <remarks>This method is not virtual by design. Derived classes
            should override <see cref="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.Dispose(System.Boolean)"/>.
            </remarks>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.Dispose(System.Boolean)">
            <summary>
            Closes the tray and releases all resources.
            </summary>
            <summary>
            <c>Dispose(bool disposing)</c> executes in two distinct scenarios.
            If disposing equals <c>true</c>, the method has been called directly
            or indirectly by a user's code. Managed and unmanaged resources
            can be disposed.
            </summary>
            <param name="disposing">If disposing equals <c>false</c>, the method
            has been called by the runtime from inside the finalizer and you
            should not reference other objects. Only unmanaged resources can
            be disposed.</param>
            <remarks>Check the <see cref="P:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.IsDisposed"/> property to determine whether
            the method has already been called.</remarks>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.CategoryName">
            <summary>
            Category name that is set on designer properties.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.TrayPopupResolvedPropertyKey">
            <summary>
            TrayPopupResolved Read-Only Dependency Property
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.TrayPopupResolvedProperty">
            <summary>
            A read-only dependency property that returns the <see cref="T:System.Windows.Controls.Primitives.Popup"/>
            that is being displayed in the taskbar area based on a user action.
            </summary>
        </member>
        <member name="P:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.TrayPopupResolved">
            <summary>
            Gets the TrayPopupResolved property. Returns
            a <see cref="T:System.Windows.Controls.Primitives.Popup"/> which is either the
            <see cref="P:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.TrayPopup"/> control itself or a
            <see cref="T:System.Windows.Controls.Primitives.Popup"/> control that contains the
            <see cref="P:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.TrayPopup"/>.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.SetTrayPopupResolved(System.Windows.Controls.Primitives.Popup)">
            <summary>
            Provides a secure method for setting the TrayPopupResolved property.  
            This dependency property indicates ....
            </summary>
            <param name="value">The new value for the property.</param>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.TrayToolTipResolvedPropertyKey">
            <summary>
            TrayToolTipResolved Read-Only Dependency Property
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.TrayToolTipResolvedProperty">
            <summary>
            A read-only dependency property that returns the <see cref="T:System.Windows.Controls.ToolTip"/>
            that is being displayed.
            </summary>
        </member>
        <member name="P:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.TrayToolTipResolved">
            <summary>
            Gets the TrayToolTipResolved property. Returns 
            a <see cref="T:System.Windows.Controls.ToolTip"/> control that was created
            in order to display either <see cref="P:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.TrayToolTip"/>
            or <see cref="P:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.ToolTipText"/>.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.SetTrayToolTipResolved(System.Windows.Controls.ToolTip)">
            <summary>
            Provides a secure method for setting the <see cref="P:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.TrayToolTipResolved"/>
            property.  
            </summary>
            <param name="value">The new value for the property.</param>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.CustomBalloonPropertyKey">
            <summary>
            CustomBalloon Read-Only Dependency Property
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.CustomBalloonProperty">
            <summary>
            Maintains a currently displayed custom balloon.
            </summary>
        </member>
        <member name="P:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.CustomBalloon">
            <summary>
            A custom popup that is being displayed in the tray area in order
            to display messages to the user.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.SetCustomBalloon(System.Windows.Controls.Primitives.Popup)">
            <summary>
            Provides a secure method for setting the <see cref="P:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.CustomBalloon"/> property.  
            </summary>
            <param name="value">The new value for the property.</param>
        </member>
        <member name="P:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.Icon">
            <summary>
            Gets or sets the icon to be displayed. This is not a
            dependency property - if you want to assign the property
            through XAML, please use the <see cref="P:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.IconSource"/>
            dependency property.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.IconSourceProperty">
            <summary>
            Resolves an image source and updates the <see cref="P:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.Icon" /> property accordingly.
            </summary>
        </member>
        <member name="P:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.IconSource">
            <summary>
            A property wrapper for the <see cref="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.IconSourceProperty"/>
            dependency property:<br/>
            Resolves an image source and updates the <see cref="P:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.Icon" /> property accordingly.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.IconSourcePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            A static callback listener which is being invoked if the
            <see cref="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.IconSourceProperty"/> dependency property has
            been changed. Invokes the <see cref="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.OnIconSourcePropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)"/>
            instance method of the changed instance.
            </summary>
            <param name="d">The currently processed owner of the property.</param>
            <param name="e">Provides information about the updated property.</param>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.OnIconSourcePropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes of the <see cref="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.IconSourceProperty"/> dependency property. As
            WPF internally uses the dependency property system and bypasses the
            <see cref="P:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.IconSource"/> property wrapper, updates of the property's value
            should be handled here.
            </summary>
            <param name="e">Provides information about the updated property.</param>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.ToolTipTextProperty">
            <summary>
            A tooltip text that is being displayed if no custom <see cref="T:System.Windows.Controls.ToolTip"/>
            was set or if custom tooltips are not supported.
            </summary>
        </member>
        <member name="P:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.ToolTipText">
            <summary>
            A property wrapper for the <see cref="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.ToolTipTextProperty"/>
            dependency property:<br/>
            A tooltip text that is being displayed if no custom <see cref="T:System.Windows.Controls.ToolTip"/>
            was set or if custom tooltips are not supported.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.ToolTipTextPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            A static callback listener which is being invoked if the
            <see cref="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.ToolTipTextProperty"/> dependency property has
            been changed. Invokes the <see cref="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.OnToolTipTextPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)"/>
            instance method of the changed instance.
            </summary>
            <param name="d">The currently processed owner of the property.</param>
            <param name="e">Provides information about the updated property.</param>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.OnToolTipTextPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes of the <see cref="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.ToolTipTextProperty"/> dependency property. As
            WPF internally uses the dependency property system and bypasses the
            <see cref="P:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.ToolTipText"/> property wrapper, updates of the property's value
            should be handled here.
            </summary>
            <param name="e">Provides information about the updated property.</param>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.TrayToolTipProperty">
            <summary>
            A custom UI element that is displayed as a tooltip if the user hovers over the taskbar icon.
            Works only with Vista and above. Accordingly, you should make sure that
            the <see cref="P:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.ToolTipText"/> property is set as well.
            </summary>
        </member>
        <member name="P:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.TrayToolTip">
            <summary>
            A property wrapper for the <see cref="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.TrayToolTipProperty"/>
            dependency property:<br/>
            A custom UI element that is displayed as a tooltip if the user hovers over the taskbar icon.
            Works only with Vista and above. Accordingly, you should make sure that
            the <see cref="P:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.ToolTipText"/> property is set as well.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.TrayToolTipPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            A static callback listener which is being invoked if the
            <see cref="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.TrayToolTipProperty"/> dependency property has
            been changed. Invokes the <see cref="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.OnTrayToolTipPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)"/>
            instance method of the changed instance.
            </summary>
            <param name="d">The currently processed owner of the property.</param>
            <param name="e">Provides information about the updated property.</param>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.OnTrayToolTipPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes of the <see cref="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.TrayToolTipProperty"/> dependency property. As
            WPF internally uses the dependency property system and bypasses the
            <see cref="P:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.TrayToolTip"/> property wrapper, updates of the property's value
            should be handled here.
            </summary>
            <param name="e">Provides information about the updated property.</param>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.TrayPopupProperty">
            <summary>
            A control that is displayed as a popup when the taskbar icon is clicked.
            </summary>
        </member>
        <member name="P:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.TrayPopup">
            <summary>
            A property wrapper for the <see cref="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.TrayPopupProperty"/>
            dependency property:<br/>
            A control that is displayed as a popup when the taskbar icon is clicked.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.TrayPopupPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            A static callback listener which is being invoked if the
            <see cref="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.TrayPopupProperty"/> dependency property has
            been changed. Invokes the <see cref="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.OnTrayPopupPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)"/>
            instance method of the changed instance.
            </summary>
            <param name="d">The currently processed owner of the property.</param>
            <param name="e">Provides information about the updated property.</param>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.OnTrayPopupPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes of the <see cref="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.TrayPopupProperty"/> dependency property. As
            WPF internally uses the dependency property system and bypasses the
            <see cref="P:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.TrayPopup"/> property wrapper, updates of the property's value
            should be handled here.
            </summary>
            <param name="e">Provides information about the updated property.</param>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.MenuActivationProperty">
            <summary>
            Defines what mouse events display the context menu.
            Defaults to <see cref="F:Hardcodet.Wpf.TaskbarNotification.PopupActivationMode.RightClick"/>.
            </summary>
        </member>
        <member name="P:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.MenuActivation">
            <summary>
            A property wrapper for the <see cref="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.MenuActivationProperty"/>
            dependency property:<br/>
            Defines what mouse events display the context menu.
            Defaults to <see cref="F:Hardcodet.Wpf.TaskbarNotification.PopupActivationMode.RightClick"/>.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.PopupActivationProperty">
            <summary>
            Defines what mouse events trigger the <see cref="P:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.TrayPopup" />.
            Default is <see cref="F:Hardcodet.Wpf.TaskbarNotification.PopupActivationMode.LeftClick" />.
            </summary>
        </member>
        <member name="P:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.PopupActivation">
            <summary>
            A property wrapper for the <see cref="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.PopupActivationProperty"/>
            dependency property:<br/>
            Defines what mouse events trigger the <see cref="P:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.TrayPopup" />.
            Default is <see cref="F:Hardcodet.Wpf.TaskbarNotification.PopupActivationMode.LeftClick" />.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.VisibilityPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            A static callback listener which is being invoked if the
            <see cref="F:System.Windows.UIElement.VisibilityProperty"/> dependency property has
            been changed. Invokes the <see cref="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.OnVisibilityPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)"/>
            instance method of the changed instance.
            </summary>
            <param name="d">The currently processed owner of the property.</param>
            <param name="e">Provides information about the updated property.</param>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.OnVisibilityPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes of the <see cref="F:System.Windows.UIElement.VisibilityProperty"/> dependency property. As
            WPF internally uses the dependency property system and bypasses the
            <see cref="T:System.Windows.Visibility"/> property wrapper, updates of the property's value
            should be handled here.
            </summary>
            <param name="e">Provides information about the updated property.</param>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.UpdateDataContext(System.Windows.FrameworkElement,System.Object,System.Object)">
            <summary>
            Updates the <see cref="F:System.Windows.FrameworkElement.DataContextProperty"/> of a given
            <see cref="T:System.Windows.FrameworkElement"/>. This method only updates target elements
            that do not already have a data context of their own, and either assigns
            the <see cref="P:System.Windows.FrameworkElement.DataContext"/> of the NotifyIcon, or the
            NotifyIcon itself, if no data context was assigned at all.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.DataContextPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            A static callback listener which is being invoked if the
            <see cref="F:System.Windows.FrameworkElement.DataContextProperty"/> dependency property has
            been changed. Invokes the <see cref="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.OnDataContextPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)"/>
            instance method of the changed instance.
            </summary>
            <param name="d">The currently processed owner of the property.</param>
            <param name="e">Provides information about the updated property.</param>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.OnDataContextPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes of the <see cref="F:System.Windows.FrameworkElement.DataContextProperty"/> dependency property. As
            WPF internally uses the dependency property system and bypasses the
            <see cref="P:System.Windows.FrameworkElement.DataContext"/> property wrapper, updates of the property's value
            should be handled here.
            </summary>
            <param name="e">Provides information about the updated property.</param>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.ContextMenuPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            A static callback listener which is being invoked if the
            <see cref="F:System.Windows.FrameworkElement.ContextMenuProperty"/> dependency property has
            been changed. Invokes the <see cref="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.OnContextMenuPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)"/>
            instance method of the changed instance.
            </summary>
            <param name="d">The currently processed owner of the property.</param>
            <param name="e">Provides information about the updated property.</param>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.OnContextMenuPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Releases the old and updates the new <see cref="T:System.Windows.Controls.ContextMenu"/> property
            in order to reflect both the NotifyIcon's <see cref="P:System.Windows.FrameworkElement.DataContext"/>
            property and have the <see cref="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.ParentTaskbarIconProperty"/> assigned.
            </summary>
            <param name="e">Provides information about the updated property.</param>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.DoubleClickCommandProperty">
            <summary>
            Associates a command that is being executed if the tray icon is being
            double clicked.
            </summary>
        </member>
        <member name="P:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.DoubleClickCommand">
            <summary>
            A property wrapper for the <see cref="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.DoubleClickCommandProperty"/>
            dependency property:<br/>
            Associates a command that is being executed if the tray icon is being
            double clicked.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.DoubleClickCommandParameterProperty">
            <summary>
            Command parameter for the <see cref="P:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.DoubleClickCommand"/>.
            </summary>
        </member>
        <member name="P:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.DoubleClickCommandParameter">
            <summary>
            A property wrapper for the <see cref="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.DoubleClickCommandParameterProperty"/>
            dependency property:<br/>
            Command parameter for the <see cref="P:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.DoubleClickCommand"/>.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.DoubleClickCommandTargetProperty">
            <summary>
            The target of the command that is fired if the notify icon is double clicked.
            </summary>
        </member>
        <member name="P:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.DoubleClickCommandTarget">
            <summary>
            A property wrapper for the <see cref="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.DoubleClickCommandTargetProperty"/>
            dependency property:<br/>
            The target of the command that is fired if the notify icon is double clicked.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.LeftClickCommandProperty">
            <summary>
            Associates a command that is being executed if the tray icon is being
            double clicked.
            </summary>
        </member>
        <member name="P:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.LeftClickCommand">
            <summary>
            A property wrapper for the <see cref="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.LeftClickCommandProperty"/>
            dependency property:<br/>
            Associates a command that is being executed if the tray icon is being
            left-clicked.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.LeftClickCommandParameterProperty">
            <summary>
            Command parameter for the <see cref="P:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.LeftClickCommand"/>.
            </summary>
        </member>
        <member name="P:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.LeftClickCommandParameter">
            <summary>
            A property wrapper for the <see cref="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.LeftClickCommandParameterProperty"/>
            dependency property:<br/>
            Command parameter for the <see cref="P:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.LeftClickCommand"/>.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.LeftClickCommandTargetProperty">
            <summary>
            The target of the command that is fired if the notify icon is clicked.
            </summary>
        </member>
        <member name="P:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.LeftClickCommandTarget">
            <summary>
            A property wrapper for the <see cref="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.LeftClickCommandTargetProperty"/>
            dependency property:<br/>
            The target of the command that is fired if the notify icon is clicked.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.NoLeftClickDelayProperty">
            <summary>
            Set to true to make left clicks work without delay.
            </summary>
        </member>
        <member name="P:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.NoLeftClickDelay">
            <summary>
            A property wrapper for the <see cref="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.NoLeftClickDelayProperty"/>
            dependency property:<br/>
            Set to true to make left clicks work without delay.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.TrayLeftMouseDownEvent">
            <summary>
            TrayLeftMouseDown Routed Event
            </summary>
        </member>
        <member name="E:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.TrayLeftMouseDown">
            <summary>
            Occurs when the user presses the left mouse button.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.RaiseTrayLeftMouseDownEvent">
            <summary>
            A helper method to raise the TrayLeftMouseDown event.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.RaiseTrayLeftMouseDownEvent(System.Windows.DependencyObject)">
            <summary>
            A static helper method to raise the TrayLeftMouseDown event on a target element.
            </summary>
            <param name="target">UIElement or ContentElement on which to raise the event</param>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.TrayRightMouseDownEvent">
            <summary>
            TrayRightMouseDown Routed Event
            </summary>
        </member>
        <member name="E:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.TrayRightMouseDown">
            <summary>
            Occurs when the presses the right mouse button.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.RaiseTrayRightMouseDownEvent">
            <summary>
            A helper method to raise the TrayRightMouseDown event.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.RaiseTrayRightMouseDownEvent(System.Windows.DependencyObject)">
            <summary>
            A static helper method to raise the TrayRightMouseDown event on a target element.
            </summary>
            <param name="target">UIElement or ContentElement on which to raise the event</param>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.TrayMiddleMouseDownEvent">
            <summary>
            TrayMiddleMouseDown Routed Event
            </summary>
        </member>
        <member name="E:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.TrayMiddleMouseDown">
            <summary>
            Occurs when the user presses the middle mouse button.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.RaiseTrayMiddleMouseDownEvent">
            <summary>
            A helper method to raise the TrayMiddleMouseDown event.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.RaiseTrayMiddleMouseDownEvent(System.Windows.DependencyObject)">
            <summary>
            A static helper method to raise the TrayMiddleMouseDown event on a target element.
            </summary>
            <param name="target">UIElement or ContentElement on which to raise the event</param>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.TrayLeftMouseUpEvent">
            <summary>
            TrayLeftMouseUp Routed Event
            </summary>
        </member>
        <member name="E:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.TrayLeftMouseUp">
            <summary>
            Occurs when the user releases the left mouse button.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.RaiseTrayLeftMouseUpEvent">
            <summary>
            A helper method to raise the TrayLeftMouseUp event.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.RaiseTrayLeftMouseUpEvent(System.Windows.DependencyObject)">
            <summary>
            A static helper method to raise the TrayLeftMouseUp event on a target element.
            </summary>
            <param name="target">UIElement or ContentElement on which to raise the event</param>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.TrayRightMouseUpEvent">
            <summary>
            TrayRightMouseUp Routed Event
            </summary>
        </member>
        <member name="E:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.TrayRightMouseUp">
            <summary>
            Occurs when the user releases the right mouse button.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.RaiseTrayRightMouseUpEvent">
            <summary>
            A helper method to raise the TrayRightMouseUp event.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.RaiseTrayRightMouseUpEvent(System.Windows.DependencyObject)">
            <summary>
            A static helper method to raise the TrayRightMouseUp event on a target element.
            </summary>
            <param name="target">UIElement or ContentElement on which to raise the event</param>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.TrayMiddleMouseUpEvent">
            <summary>
            TrayMiddleMouseUp Routed Event
            </summary>
        </member>
        <member name="E:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.TrayMiddleMouseUp">
            <summary>
            Occurs when the user releases the middle mouse button.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.RaiseTrayMiddleMouseUpEvent">
            <summary>
            A helper method to raise the TrayMiddleMouseUp event.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.RaiseTrayMiddleMouseUpEvent(System.Windows.DependencyObject)">
            <summary>
            A static helper method to raise the TrayMiddleMouseUp event on a target element.
            </summary>
            <param name="target">UIElement or ContentElement on which to raise the event</param>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.TrayMouseDoubleClickEvent">
            <summary>
            TrayMouseDoubleClick Routed Event
            </summary>
        </member>
        <member name="E:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.TrayMouseDoubleClick">
            <summary>
            Occurs when the user double-clicks the taskbar icon.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.RaiseTrayMouseDoubleClickEvent">
            <summary>
            A helper method to raise the TrayMouseDoubleClick event.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.RaiseTrayMouseDoubleClickEvent(System.Windows.DependencyObject)">
            <summary>
            A static helper method to raise the TrayMouseDoubleClick event on a target element.
            </summary>
            <param name="target">UIElement or ContentElement on which to raise the event</param>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.TrayMouseMoveEvent">
            <summary>
            TrayMouseMove Routed Event
            </summary>
        </member>
        <member name="E:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.TrayMouseMove">
            <summary>
            Occurs when the user moves the mouse over the taskbar icon.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.RaiseTrayMouseMoveEvent">
            <summary>
            A helper method to raise the TrayMouseMove event.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.RaiseTrayMouseMoveEvent(System.Windows.DependencyObject)">
            <summary>
            A static helper method to raise the TrayMouseMove event on a target element.
            </summary>
            <param name="target">UIElement or ContentElement on which to raise the event</param>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.TrayBalloonTipShownEvent">
            <summary>
            TrayBalloonTipShown Routed Event
            </summary>
        </member>
        <member name="E:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.TrayBalloonTipShown">
            <summary>
            Occurs when a balloon ToolTip is displayed.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.RaiseTrayBalloonTipShownEvent">
            <summary>
            A helper method to raise the TrayBalloonTipShown event.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.RaiseTrayBalloonTipShownEvent(System.Windows.DependencyObject)">
            <summary>
            A static helper method to raise the TrayBalloonTipShown event on a target element.
            </summary>
            <param name="target">UIElement or ContentElement on which to raise the event</param>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.TrayBalloonTipClosedEvent">
            <summary>
            TrayBalloonTipClosed Routed Event
            </summary>
        </member>
        <member name="E:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.TrayBalloonTipClosed">
            <summary>
            Occurs when a balloon ToolTip was closed.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.RaiseTrayBalloonTipClosedEvent">
            <summary>
            A helper method to raise the TrayBalloonTipClosed event.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.RaiseTrayBalloonTipClosedEvent(System.Windows.DependencyObject)">
            <summary>
            A static helper method to raise the TrayBalloonTipClosed event on a target element.
            </summary>
            <param name="target">UIElement or ContentElement on which to raise the event</param>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.TrayBalloonTipClickedEvent">
            <summary>
            TrayBalloonTipClicked Routed Event
            </summary>
        </member>
        <member name="E:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.TrayBalloonTipClicked">
            <summary>
            Occurs when the user clicks on a balloon ToolTip.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.RaiseTrayBalloonTipClickedEvent">
            <summary>
            A helper method to raise the TrayBalloonTipClicked event.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.RaiseTrayBalloonTipClickedEvent(System.Windows.DependencyObject)">
            <summary>
            A static helper method to raise the TrayBalloonTipClicked event on a target element.
            </summary>
            <param name="target">UIElement or ContentElement on which to raise the event</param>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.TrayContextMenuOpenEvent">
            <summary>
            TrayContextMenuOpen Routed Event
            </summary>
        </member>
        <member name="E:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.TrayContextMenuOpen">
            <summary>
            Bubbled event that occurs when the context menu of the taskbar icon is being displayed.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.RaiseTrayContextMenuOpenEvent">
            <summary>
            A helper method to raise the TrayContextMenuOpen event.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.RaiseTrayContextMenuOpenEvent(System.Windows.DependencyObject)">
            <summary>
            A static helper method to raise the TrayContextMenuOpen event on a target element.
            </summary>
            <param name="target">UIElement or ContentElement on which to raise the event</param>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.PreviewTrayContextMenuOpenEvent">
            <summary>
            PreviewTrayContextMenuOpen Routed Event
            </summary>
        </member>
        <member name="E:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.PreviewTrayContextMenuOpen">
            <summary>
            Tunneled event that occurs when the context menu of the taskbar icon is being displayed.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.RaisePreviewTrayContextMenuOpenEvent">
            <summary>
            A helper method to raise the PreviewTrayContextMenuOpen event.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.RaisePreviewTrayContextMenuOpenEvent(System.Windows.DependencyObject)">
            <summary>
            A static helper method to raise the PreviewTrayContextMenuOpen event on a target element.
            </summary>
            <param name="target">UIElement or ContentElement on which to raise the event</param>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.TrayPopupOpenEvent">
            <summary>
            TrayPopupOpen Routed Event
            </summary>
        </member>
        <member name="E:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.TrayPopupOpen">
            <summary>
            Bubbled event that occurs when the custom popup is being opened.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.RaiseTrayPopupOpenEvent">
            <summary>
            A helper method to raise the TrayPopupOpen event.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.RaiseTrayPopupOpenEvent(System.Windows.DependencyObject)">
            <summary>
            A static helper method to raise the TrayPopupOpen event on a target element.
            </summary>
            <param name="target">UIElement or ContentElement on which to raise the event</param>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.PreviewTrayPopupOpenEvent">
            <summary>
            PreviewTrayPopupOpen Routed Event
            </summary>
        </member>
        <member name="E:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.PreviewTrayPopupOpen">
            <summary>
            Tunneled event that occurs when the custom popup is being opened.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.RaisePreviewTrayPopupOpenEvent">
            <summary>
            A helper method to raise the PreviewTrayPopupOpen event.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.RaisePreviewTrayPopupOpenEvent(System.Windows.DependencyObject)">
            <summary>
            A static helper method to raise the PreviewTrayPopupOpen event on a target element.
            </summary>
            <param name="target">UIElement or ContentElement on which to raise the event</param>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.TrayToolTipOpenEvent">
            <summary>
            TrayToolTipOpen Routed Event
            </summary>
        </member>
        <member name="E:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.TrayToolTipOpen">
            <summary>
            Bubbled event that occurs when the custom ToolTip is being displayed.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.RaiseTrayToolTipOpenEvent">
            <summary>
            A helper method to raise the TrayToolTipOpen event.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.RaiseTrayToolTipOpenEvent(System.Windows.DependencyObject)">
            <summary>
            A static helper method to raise the TrayToolTipOpen event on a target element.
            </summary>
            <param name="target">UIElement or ContentElement on which to raise the event</param>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.PreviewTrayToolTipOpenEvent">
            <summary>
            PreviewTrayToolTipOpen Routed Event
            </summary>
        </member>
        <member name="E:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.PreviewTrayToolTipOpen">
            <summary>
            Tunneled event that occurs when the custom ToolTip is being displayed.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.RaisePreviewTrayToolTipOpenEvent">
            <summary>
            A helper method to raise the PreviewTrayToolTipOpen event.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.RaisePreviewTrayToolTipOpenEvent(System.Windows.DependencyObject)">
            <summary>
            A static helper method to raise the PreviewTrayToolTipOpen event on a target element.
            </summary>
            <param name="target">UIElement or ContentElement on which to raise the event</param>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.TrayToolTipCloseEvent">
            <summary>
            TrayToolTipClose Routed Event
            </summary>
        </member>
        <member name="E:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.TrayToolTipClose">
            <summary>
            Bubbled event that occurs when a custom tooltip is being closed.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.RaiseTrayToolTipCloseEvent">
            <summary>
            A helper method to raise the TrayToolTipClose event.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.RaiseTrayToolTipCloseEvent(System.Windows.DependencyObject)">
            <summary>
            A static helper method to raise the TrayToolTipClose event on a target element.
            </summary>
            <param name="target">UIElement or ContentElement on which to raise the event</param>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.PreviewTrayToolTipCloseEvent">
            <summary>
            PreviewTrayToolTipClose Routed Event
            </summary>
        </member>
        <member name="E:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.PreviewTrayToolTipClose">
            <summary>
            Tunneled event that occurs when a custom tooltip is being closed.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.RaisePreviewTrayToolTipCloseEvent">
            <summary>
            A helper method to raise the PreviewTrayToolTipClose event.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.RaisePreviewTrayToolTipCloseEvent(System.Windows.DependencyObject)">
            <summary>
            A static helper method to raise the PreviewTrayToolTipClose event on a target element.
            </summary>
            <param name="target">UIElement or ContentElement on which to raise the event</param>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.PopupOpenedEvent">
            <summary>
            PopupOpened Attached Routed Event
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.AddPopupOpenedHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)">
            <summary>
            Adds a handler for the PopupOpened attached event
            </summary>
            <param name="element">UIElement or ContentElement that listens to the event</param>
            <param name="handler">Event handler to be added</param>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.RemovePopupOpenedHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)">
            <summary>
            Removes a handler for the PopupOpened attached event
            </summary>
            <param name="element">UIElement or ContentElement that listens to the event</param>
            <param name="handler">Event handler to be removed</param>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.RaisePopupOpenedEvent(System.Windows.DependencyObject)">
            <summary>
            A static helper method to raise the PopupOpened event on a target element.
            </summary>
            <param name="target">UIElement or ContentElement on which to raise the event</param>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.ToolTipOpenedEvent">
            <summary>
            ToolTipOpened Attached Routed Event
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.AddToolTipOpenedHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)">
            <summary>
            Adds a handler for the ToolTipOpened attached event
            </summary>
            <param name="element">UIElement or ContentElement that listens to the event</param>
            <param name="handler">Event handler to be added</param>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.RemoveToolTipOpenedHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)">
            <summary>
            Removes a handler for the ToolTipOpened attached event
            </summary>
            <param name="element">UIElement or ContentElement that listens to the event</param>
            <param name="handler">Event handler to be removed</param>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.RaiseToolTipOpenedEvent(System.Windows.DependencyObject)">
            <summary>
            A static helper method to raise the ToolTipOpened event on a target element.
            </summary>
            <param name="target">UIElement or ContentElement on which to raise the event</param>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.ToolTipCloseEvent">
            <summary>
            ToolTipClose Attached Routed Event
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.AddToolTipCloseHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)">
            <summary>
            Adds a handler for the ToolTipClose attached event
            </summary>
            <param name="element">UIElement or ContentElement that listens to the event</param>
            <param name="handler">Event handler to be added</param>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.RemoveToolTipCloseHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)">
            <summary>
            Removes a handler for the ToolTipClose attached event
            </summary>
            <param name="element">UIElement or ContentElement that listens to the event</param>
            <param name="handler">Event handler to be removed</param>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.RaiseToolTipCloseEvent(System.Windows.DependencyObject)">
            <summary>
            A static helper method to raise the ToolTipClose event on a target element.
            </summary>
            <param name="target">UIElement or ContentElement on which to raise the event</param>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.BalloonShowingEvent">
            <summary>
            BalloonShowing Attached Routed Event
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.AddBalloonShowingHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)">
            <summary>
            Adds a handler for the BalloonShowing attached event
            </summary>
            <param name="element">UIElement or ContentElement that listens to the event</param>
            <param name="handler">Event handler to be added</param>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.RemoveBalloonShowingHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)">
            <summary>
            Removes a handler for the BalloonShowing attached event
            </summary>
            <param name="element">UIElement or ContentElement that listens to the event</param>
            <param name="handler">Event handler to be removed</param>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.RaiseBalloonShowingEvent(System.Windows.DependencyObject,Hardcodet.Wpf.TaskbarNotification.TaskbarIcon)">
            <summary>
            A static helper method to raise the BalloonShowing event on a target element.
            </summary>
            <param name="target">UIElement or ContentElement on which to raise the event</param>
            <param name="source">The <see cref="T:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon"/> instance that manages the balloon.</param>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.BalloonClosingEvent">
            <summary>
            BalloonClosing Attached Routed Event
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.AddBalloonClosingHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)">
            <summary>
            Adds a handler for the BalloonClosing attached event
            </summary>
            <param name="element">UIElement or ContentElement that listens to the event</param>
            <param name="handler">Event handler to be added</param>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.RemoveBalloonClosingHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)">
            <summary>
            Removes a handler for the BalloonClosing attached event
            </summary>
            <param name="element">UIElement or ContentElement that listens to the event</param>
            <param name="handler">Event handler to be removed</param>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.RaiseBalloonClosingEvent(System.Windows.DependencyObject,Hardcodet.Wpf.TaskbarNotification.TaskbarIcon)">
            <summary>
            A static helper method to raise the BalloonClosing event on a target element.
            </summary>
            <param name="target">UIElement or ContentElement on which to raise the event</param>
            <param name="source">The <see cref="T:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon"/> instance that manages the balloon.</param>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.ParentTaskbarIconProperty">
            <summary>
            An attached property that is assigned to displayed UI elements (balloons, tooltips, context menus), and
            that can be used to bind to this control. The attached property is being derived, so binding is
            quite straightforward:
            <code>
            <TextBlock Text="{Binding RelativeSource={RelativeSource Self}, Path=(tb:TaskbarIcon.ParentTaskbarIcon).ToolTipText}" />
            </code>
            </summary>  
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.GetParentTaskbarIcon(System.Windows.DependencyObject)">
            <summary>
            Gets the ParentTaskbarIcon property.  This dependency property 
            indicates ....
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.SetParentTaskbarIcon(System.Windows.DependencyObject,Hardcodet.Wpf.TaskbarNotification.TaskbarIcon)">
            <summary>
            Sets the ParentTaskbarIcon property.  This dependency property 
            indicates ....
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.#cctor">
            <summary>
            Registers properties.
            </summary>
        </member>
        <member name="T:Hardcodet.Wpf.TaskbarNotification.Util">
            <summary>
            Util and extension methods.
            </summary>
        </member>
        <member name="P:Hardcodet.Wpf.TaskbarNotification.Util.IsDesignMode">
            <summary>
            Checks whether the application is currently in design mode.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.Util.CreateHelperWindow">
            <summary>
            Creates an transparent window without dimension that
            can be used to temporarily obtain focus and/or
            be used as a window message sink.
            </summary>
            <returns>Empty window.</returns>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.Util.WriteIconData(Hardcodet.Wpf.TaskbarNotification.Interop.NotifyIconData@,Hardcodet.Wpf.TaskbarNotification.Interop.NotifyCommand)">
            <summary>
            Updates the taskbar icons with data provided by a given
            <see cref="T:Hardcodet.Wpf.TaskbarNotification.Interop.NotifyIconData"/> instance.
            </summary>
            <param name="data">Configuration settings for the NotifyIcon.</param>
            <param name="command">Operation on the icon (e.g. delete the icon).</param>
            <returns>True if the data was successfully written.</returns>
            <remarks>See Shell_NotifyIcon documentation on MSDN for details.</remarks>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.Util.WriteIconData(Hardcodet.Wpf.TaskbarNotification.Interop.NotifyIconData@,Hardcodet.Wpf.TaskbarNotification.Interop.NotifyCommand,Hardcodet.Wpf.TaskbarNotification.Interop.IconDataMembers)">
            <summary>
            Updates the taskbar icons with data provided by a given
            <see cref="T:Hardcodet.Wpf.TaskbarNotification.Interop.NotifyIconData"/> instance.
            </summary>
            <param name="data">Configuration settings for the NotifyIcon.</param>
            <param name="command">Operation on the icon (e.g. delete the icon).</param>
            <param name="flags">Defines which members of the <paramref name="data"/>
            structure are set.</param>
            <returns>True if the data was successfully written.</returns>
            <remarks>See Shell_NotifyIcon documentation on MSDN for details.</remarks>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.Util.GetBalloonFlag(Hardcodet.Wpf.TaskbarNotification.BalloonIcon)">
            <summary>
            Gets a <see cref="T:Hardcodet.Wpf.TaskbarNotification.Interop.BalloonFlags"/> enum value that
            matches a given <see cref="T:Hardcodet.Wpf.TaskbarNotification.BalloonIcon"/>.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.Util.ToIcon(System.Windows.Media.ImageSource)">
            <summary>
            Reads a given image resource into a WinForms icon.
            </summary>
            <param name="imageSource">Image source pointing to
            an icon file (*.ico).</param>
            <returns>An icon object that can be used with the
            taskbar area.</returns>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.Util.Is``1(``0,``0[])">
            <summary>
            Checks a list of candidates for equality to a given
            reference value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The evaluated value.</param>
            <param name="candidates">A liste of possible values that are
            regarded valid.</param>
            <returns>True if one of the submitted <paramref name="candidates"/>
            matches the evaluated value. If the <paramref name="candidates"/>
            parameter itself is null, too, the method returns false as well,
            which allows to check with null values, too.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="candidates"/>
            is a null reference.</exception>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.Util.IsMatch(Hardcodet.Wpf.TaskbarNotification.Interop.MouseEvent,Hardcodet.Wpf.TaskbarNotification.PopupActivationMode)">
            <summary>
            Checks if a given <see cref="T:Hardcodet.Wpf.TaskbarNotification.PopupActivationMode"/> is a match for
            an effectively pressed mouse button.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.Util.ExecuteIfEnabled(System.Windows.Input.ICommand,System.Object,System.Windows.IInputElement)">
            <summary>
            Executes a given command if its <see cref="M:System.Windows.Input.ICommand.CanExecute(System.Object)"/> method
            indicates it can run.
            </summary>
            <param name="command">The command to be executed, or a null reference.</param>
            <param name="commandParameter">An optional parameter that is associated with
            the command.</param>
            <param name="target">The target element on which to raise the command.</param>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.Util.GetDispatcher(System.Windows.Threading.DispatcherObject)">
            <summary>
            Returns a dispatcher for multi-threaded scenarios
            </summary>
            <returns>Dispatcher</returns>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.Util.IsDataContextDataBound(System.Windows.FrameworkElement)">
            <summary>
            Checks whether the <see cref="F:System.Windows.FrameworkElement.DataContextProperty"/>
             is bound or not.
            </summary>
            <param name="element">The element to be checked.</param>
            <returns>True if the data context property is being managed by a
            binding expression.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="element"/>
            is a null reference.</exception>
        </member>
    </members>
</doc>
